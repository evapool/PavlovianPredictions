aggregate.control.acc.id <- subset(aggregate.control.acc.id, select = -c(accuracy))
write.csv(aggregate.control.acc.id,file.path(figures_path, 'SourceData_Supplementary_Figure_2_B_aggregate_estimates.csv'))
# Plot SIDE
Plot.R.SIDE_acc.long$ROI <- dplyr::recode(Plot.R.SIDE_acc.long$ROI, "STG" = "SMG")
sumstat.side.control.acc <- summarySE(Plot.R.SIDE_acc.long,
measurevar = c("accuracy"),
groupvars = "ROI")
SIDE.control.acc.pp <- ggplot(data = Plot.R.SIDE_acc.long, aes (x=ROI, y = accuracy, fill = ROI, color = ROI)) +
geom_abline(slope=0, intercept=0.5, linetype = "dashed", color = "black") +
geom_point(aes(color = ROI),position = position_jitterdodge(jitter.width = .5, jitter.height = 0),alpha = .2) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .1, aes(fill = ROI, color = NA), color = NA) +
geom_crossbar(data = sumstat.side.control.acc, aes(y = accuracy, ymin=accuracy, ymax=accuracy), width = 0.5 , alpha = 0.0) +
geom_errorbar(data = sumstat.side.control.acc, aes(x = ROI, ymin = accuracy-se, ymax = accuracy+se), width = 0.3) +
theme_bw() +
scale_fill_manual(values=c("#FFCC33","#FFCC33","#FFCC33","#FFCC33")) +
scale_color_manual(values=c("#9D6C00","#9D6C00","#9D6C00","#9D6C00")) +
theme_bw() +
scale_y_continuous( limits = c(0.3,0.9)) +
labs(
title = '',
x = 'ROI',
y = "Decoding accuracy"
)
SIDE.control.acc.pp  = SIDE.control.acc.pp + timeline_theme + theme(legend.position="none")
#  write source file
write.csv(Plot.R.SIDE_acc.long,file.path(figures_path, 'SourceData_Supplementary_Figure_2_A_individual_estimates.csv'))
aggregate.control.acc.side = sumstat.side.control.acc[c('ROI','accuracy','se','N')]
aggregate.control.acc.side$mean = aggregate.control.acc.side$accuracy
aggregate.control.acc.side <- subset(aggregate.control.acc.side, select = -c(accuracy))
write.csv(aggregate.control.acc.side,file.path(figures_path, 'SourceData_Supplementary_Figure_2_A_aggregate_estimates.csv'))
# Plot compiled figure
control.acc.pp = plot_grid(SIDE.control.acc.pp, ID.control.acc.pp, ncol = 1, labels=c('A', 'B'), scale = 0.9, label_size = 28)
pdf(file.path(figures_path,'Supplementary_Figure_2.pdf'),width=12,height=8)
print(control.acc.pp)
dev.off()
# ----------------model based value  derived from the FWD model ---------------
# frequentistic approach
mdl_value = formula(pupil ~ MB_VV + ( MB_VV|ID))
value_mod = lmer(mdl_value, data = MDL, control = my_control)
mb_value  = coef(value_mod)
summary(value_mod)
confint(value_mod, level = 0.95, method = "Wald")
# BF
fit_pupil_mb_val <- brm(scale(pupil) ~ MB_VV + (MB_VV |ID),
prior =  c(prior(normal(0,0.5), class="b", coef=""),prior(cauchy(0,0.5), class="sd")),
data =MDL, # on the aggregate data
iter = 40000, warmup=5000,
family = gaussian(), save_pars = save_pars(all = TRUE))
describe_posterior(fit_pupil_mb_val , estimate = "median",
dispersion = T, ci = .9, ci_method = "hdi",
bf_prior = fit_pupil_mb_val, diagnostic = "Rhat",
test = c("p_direction", "bf"))
# ----------------model based value  derived from the RW model ---------------
# frequentistic approach
mf_mdl_value = formula(pupil ~ MF_VV + (MF_VV|ID))
mf_value_mod = lmer(mf_mdl_value, data = MDL, control = my_control)
mf_value     = coef(mf_value_mod)
summary(mf_value_mod )
confint(mf_value_mod , level = 0.95, method = "Wald")
# BF
fit_pupil_mf_val <- brm(scale(pupil) ~ MF_VV + (MF_VV |ID),
prior =  c(prior(normal(0,0.5), class="b", coef=""),prior(cauchy(0,0.5), class="sd")),
data =MDL, # on the aggregate data
iter = 40000, warmup=5000,
family = gaussian(), save_pars = save_pars(all = TRUE))
describe_posterior(fit_pupil_mf_val , estimate = "median",
dispersion = T, ci = .9, ci_method = "hdi",
bf_prior = fit_pupil_mf_val, diagnostic = "Rhat",
test = c("p_direction", "bf"))
#-------------------------------------------------------------------------------
# R1  Minor Comment3 : Liking ratings of the sweet and the salty outcomes
#-------------------------------------------------------------------------------
# format dataset
FOOD.m <- aggregate(outcome_liking ~ US_ID*ID , data = FOOD, function(x) mean(x, na.rm =T))
FOOD.m$US_ID = factor(FOOD.m$US_ID)
FOOD.m.bg = summarySEwithin(FOOD.m,
measurevar = c("outcome_liking"),
withinvars = c("US_ID"),
idvar = "ID")
# statistical test frequentistic
mf = formula(outcome_liking ~ US_ID * run + (US_ID + run |ID)) # ! simplified error term
check_id_val = lmer(mf, data = FOOD, control = my_control)
summary(check_id_val)
confint(check_id_val, level = 0.95, method = "Wald")
# Bayesian analysis
FOOD$US_ID_b = ifelse(FOOD$US_ID == "sweet", -1, 1)
fit_IDval <- brm( scale(outcome_liking) ~ US_ID_b * scale(run) + (US_ID_b * scale(run) |ID),
prior =  c(prior(normal(0,0.5), class="b", coef=""),prior(cauchy(0,0.5), class="sd")),
data =FOOD,
family = gaussian(), save_pars = save_pars(all = TRUE))
describe_posterior(fit_IDval, estimate = "median",
dispersion = T, ci = .9, ci_method = "hdi",
bf_prior = fit_IDval, diagnostic = "Rhat",
test = c("p_direction", "bf"))
# Plot
p_US_ID_check <- ggplot(data = FOOD.m, aes(x = US_ID, y = outcome_liking,
fill = US_ID, color = US_ID)) +
geom_abline(slope= 0, intercept=5, linetype = "dashed", color = "gray") +
geom_point(aes(x = US_ID, y = outcome_liking, group = ID),
alpha = 0.9, position = position_dodge(0.5)) +
geom_crossbar(data = FOOD.m.bg, aes(x = US_ID, y = outcome_liking,ymin=outcome_liking, ymax=outcome_liking),
width = 0.7 , alpha = 0) +
geom_errorbar(data = FOOD.m.bg, aes(x = US_ID, ymin = outcome_liking-se, ymax = outcome_liking+se),
width = 0.6) +
geom_flat_violin(aes(x = 2.7), alpha = .5, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_x_discrete(labels = c("Sweet", "Salty")) +
scale_y_continuous(breaks = seq(0, 10, 1), limits = c(0, 12), expand = c(0, 0))+
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0.3, end = 0.7, option = "viridis") +
theme_bw() +
labs( x = "Outcome", y = "Pleasantness of the outcome")
p_US_ID_check = p_US_ID_check+ timeline_theme + theme(legend.position="none") +
theme( panel.grid.major.y = element_blank())
pdf(file.path(figures_path,'Supplementary_Figure_1.pdf'))
print(p_US_ID_check )
dev.off()
#  write source file
write.csv(FOOD.m,file.path(figures_path, 'SourceData_Supplementary_Figure_1_individual_estimates.csv'))
aggregate.food = FOOD.m.bg[c('US_ID','outcome_liking','se','N')]
aggregate.food$mean = aggregate.food$outcome_liking
aggregate.food <- subset(aggregate.food, select = -c(outcome_liking))
write.csv(aggregate.food,file.path(figures_path, 'SourceData_Supplementary_Figure_1_aggregate_estimates.csv'))
#-------------------------------------------------------------------------------
#                  REVIEWER 2
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# R2 Comment4 : Role of hunger across sessions
#-------------------------------------------------------------------------------
# format database
HUNGER <- aggregate (hunger ~ run*ID, data = FOOD, function(x) mean(x, na.rm =T))
HUNGER$ID= factor(HUNGER$ID)
HUNGER$run= factor(HUNGER$run)
HUNGER.bg = summarySEwithin(HUNGER,
measurevar = c("hunger"),
withinvars = c("run"),
idvar = "ID")
# create plot
hunger.pp <- ggplot(data = HUNGER, aes(x = run,  y = hunger, fill = run, color = run)) +
geom_abline(slope= 0, intercept=5, linetype = "dashed", color = "black") +
geom_point(aes(x = run, y = hunger, group = ID), alpha = 0.7, position = position_dodge(0.3)) +
geom_crossbar(data = HUNGER.bg, aes(x = run,  y = hunger, ymin=hunger, ymax=hunger),
width = 0.6 , alpha = 0) +
geom_errorbar(data = HUNGER.bg, aes(x = run, ymin = hunger-se, ymax = hunger+se),
width = 0.7) +
geom_flat_violin(aes(x = 3.7), alpha = .5, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_y_continuous(breaks = seq(0, 10, 1), limits = c(-0.5, 12), expand = c(0, 0)) +
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0, end = 0.75, option = "magma", direction = -1) +
theme_bw() +
annotate("rect", xmin=0.6, xmax=2.4, ymin=0, ymax=11, alpha=0.2, fill="gray") +
annotate("rect", xmin=2.6, xmax=3.4, ymin=0, ymax=11, alpha=0.2, fill="gray") +
annotate("text", x = 1.5, y = 0.5, label = "Acquisition",size = 5) +
annotate("text", x = 3, y = 0.5, label = "Test",size = 5) +
annotate("segment", x = 2, xend = 3, y = 11.1, yend = 11.1) +
annotate("segment", x = 1, xend = 3, y = 11.6, yend = 11.6) +
annotate("text", x = 2.5, y = 11.2, label = "**", size = 6) +
annotate("text", x = 2, y = 11.7, label = "**", size = 6) +
labs( x = "Run", y = "Hunger ratings")
hunger.pp = hunger.pp+ timeline_theme + theme(legend.position="none") +
theme( panel.grid.major.y = element_blank())
pdf(file.path(figures_path,'Supplementary_Figure_4.pdf'))
print(hunger.pp)
dev.off()
# quick test for plot
anova(lmer(hunger ~ run + (1| ID), data = subset(HUNGER, run != "1"), control = my_control))
anova(lmer(hunger ~ run + (1| ID), data = subset(HUNGER, run != "3"), control = my_control))
anova(lmer(hunger ~ run + (1| ID), data = subset(HUNGER, run != "2"), control = my_control))
#  write source file
write.csv(HUNGER,file.path(figures_path, 'SourceData_Supplementary_Figure_4_individual_estimates.csv'))
aggregate.hunger = HUNGER.bg[c('run','hunger','se','N')]
aggregate.hunger$mean = aggregate.hunger$hunger
aggregate.hunger  <- subset(aggregate.hunger, select = -c(hunger))
write.csv(aggregate.hunger,file.path(figures_path, 'SourceData_Supplementary_Figure_4_aggregate_estimates.csv'))
plot_grid(pupil.deval.pp, dw.deval.pp, nrow = 1, labels=c('A', 'B'), scale = 0.9, label_size = 28)
# combine pannels in a single figure
supp.eyes.pp = plot_grid(pupil.deval.pp, dw.deval.pp, nrow = 1, labels=c('A', 'B'), scale = 0.9, label_size = 28)
#print
pdf(file.path(figures_path,'Supplementary_Figure_5.pdf'),width=5,height=8)
print(supp.eyes.pp)
dev.off()
# combine pannels in a single figure
supp.eyes.pp = plot_grid(pupil.deval.pp, dw.deval.pp, nrow = 1, labels=c('A', 'B'), scale = 0.9, label_size = 28)
#print
pdf(file.path(figures_path,'Supplementary_Figure_5.pdf'),width=9,height=5)
print(supp.eyes.pp)
dev.off()
# combine pannels in a single figure
supp.eyes.pp = plot_grid(pupil.deval.pp, dw.deval.pp, nrow = 1, labels=c('A', 'B'), scale = 0.9, label_size = 28)
#print
pdf(file.path(figures_path,'Supplementary_Figure_5.pdf'))
print(supp.eyes.pp)
dev.off()
# load libraries
if(!require(pacman)) {
install.packages('pacman')
library(pacman)
}
pacman::p_load(car, effects,afex, jtools, ez, emmeans,
lme4, lmerTest,nlme, psych, rstudioapi, optimx,pbkrtest,
tidyverse, plyr, dplyr, tidyr, reshape, reshape2, pastecs,Rmisc,
devtools,
viridis, ggplot2, grid, gridExtra,cowplot,corrplot,DescTools,ggExtra,
BayesFactor, bayestestR, DHARMa, brms)
require(lattice)
# set path
current_dir <- dirname(getActiveDocumentContext()$path)
setwd(current_dir)
home_path <- getwd()
setwd(home_path)
# run set up
source(file.path(home_path,'R','setup.R'), echo=F)# useful functions
#-------------------------------------------------------------------------------
#                                   SPE ROI
#-------------------------------------------------------------------------------
# aggregate over left and right
m.spe = aggregate(betas ~ ID + roi + SIDE_PE + ID_PE, data= db.BrainBehav.spe,  function(x) mean(x, na.rm =T))
#model RT_ID corr SPE
mf_spe_id = formula(betas ~ (ID_PE) + (1|ID))
spe_id_mod = lmer(mf_spe_id, data = m.spe, control = my_control)
summary(spe_id_mod)
confint(spe_id_mod, level = 0.95, method = "Wald")
# pannel A
DB.spe = subset(DB.all, feature == "SPE")
pp_lin_spe = ggplot(DB.spe, aes(x = RT, y = betas, fill = RT_PE, color = RT_PE)) +
geom_point(alpha = .5, size = 3.5, position = position_jitterdodge(jitter.width = .0, jitter.height = 0)) +
geom_smooth(method = lm, level = .95, alpha = .1, fullrange=TRUE) +
ylab('Betas of SPE')+
xlab('RT [unexpected - expected]')+
scale_fill_manual(name="Outcome Feature",labels=c("Side", "Identity"), values=c("#FFCC33", "#990000")) +
scale_color_manual(name="Outcome Feature",labels=c("Side", "Identity"), values=c("#FFCC33", "#990000")) +
ylim(c(-1.5,2)) +
xlim(c(-0.35, 0.35))+
theme_bw()
pp_lin_spe = pp_lin_spe + timeline_theme
pp_lin_spe <- ggMarginal(pp_lin_spe + theme(legend.position = "bottom"),type = "density",
groupColour = TRUE, groupFill = T, alpha = 0.2)
pp_lin_spe
pdf(file.path(figures_path,'Figure_4B.pdf'))
print(pp_lin_rpe)
dev.off()
# pannel B
DB.rpe = subset(DB.all, feature == "RPE")
pp_lin_rpe = ggplot(DB.rpe, aes(x = RT, y = betas, fill = RT_PE, color = RT_PE)) +
geom_point(alpha = .5, size = 3.5, position = position_jitterdodge(jitter.width = .0, jitter.height = 0)) +
geom_smooth(method = lm, level = .95, alpha = .1, fullrange=TRUE) +
ylab('Betas of RPE')+
xlab('RT [unexpected - expected]')+
scale_fill_manual(name="Outcome Feature",labels=c("Side", "Identity"), values=c("#FFCC33", "#990000")) +
scale_color_manual(name="Outcome Feature",labels=c("Side", "Identity"), values=c("#FFCC33", "#990000")) +
ylim(c(-1.5,2)) +
xlim(c(-0.35, 0.35))+
theme_bw()
pp_lin_rpe = pp_lin_rpe  + timeline_theme
pp_lin_rpe  <- ggMarginal(pp_lin_rpe  + theme(legend.position = "bottom"),type = "density",
groupColour = F, yparams = list(fill = "#56B4E9", color = "#000066",alpha=.2))
pdf(file.path(figures_path,'Figure_4B.pdf'))
print(pp_lin_rpe)
dev.off()
# pannel A
DB.spe = subset(DB.all, feature == "SPE")
pp_lin_spe = ggplot(DB.spe, aes(x = RT, y = betas, fill = RT_PE, color = RT_PE)) +
geom_point(alpha = .5, size = 3.5, position = position_jitterdodge(jitter.width = .0, jitter.height = 0)) +
geom_smooth(method = lm, level = .95, alpha = .1, fullrange=TRUE) +
ylab('Betas of SPE')+
xlab('RT [unexpected - expected]')+
scale_fill_manual(name="Outcome Feature",labels=c("Side", "Identity"), values=c("#FFCC33", "#990000")) +
scale_color_manual(name="Outcome Feature",labels=c("Side", "Identity"), values=c("#FFCC33", "#990000")) +
ylim(c(-1.5,2)) +
xlim(c(-0.35, 0.35))+
theme_bw()
pp_lin_spe = pp_lin_spe + timeline_theme
pp_lin_spe <- ggMarginal(pp_lin_spe + theme(legend.position = "bottom"),type = "density",
groupColour = TRUE, groupFill = T, alpha = 0.2)
pdf(file.path(figures_path,'Figure_4A.pdf'))
print(pp_lin_spe)
dev.off()
# combine the pannels
brainbehav.pp = plot_grid(pp_lin_spe, pp_lin_rpe, nrow = 1, labels=c('A', 'B'), scale = 0.9, label_size = 28)
brainbehav.pp
# combine the pannels
brainbehav.pp = plot_grid(pp_lin_spe, pp_lin_rpe, nrow = 1, labels=c('A', 'B'), scale = 0.9, label_size = 28)
pdf(file.path(figures_path,'Figure_4.pdf'),width=8,height=5)
print(brainbehav.pp)
dev.off()
side.bs
#--------------------------- PLOT SIDE -------------------------------------------------
side.bs = ddply(SIDE_long_m_index,.(ID,roi),transform, index2=mean(index2))
side.bs = subset (side.bs, CS == "valued")
side.bs = subset (side.bs, prepost == "post")
side.bs
# --------------------------- plot raw data ------------------------------------
parameter_distribution <- ggplot(data = db.free_parameters,
aes(x = 1, y = parameter_value,fill = parameter_name,
color = parameter_name) ) +
geom_point(aes(x = 1, y = parameter_value, group = ID), alpha = 0.9, position = position_dodge(0.6)) +
geom_crossbar(data = db.free_parameters.bg , aes(x = 1,y = parameter_value, ymin=parameter_value, ymax=parameter_value),
width = 0.8 , alpha = 0) +
geom_errorbar(data = db.free_parameters.bg , aes(x = 1, ymin = parameter_value-se, ymax = parameter_value+se),
width = 0.7) +
facet_wrap(~parameter_name) +
geom_flat_violin(aes(x = 1.8), alpha = .3, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0, end = 0.5, option = "viridis") +
theme_bw() +
labs(x = '', y = "Estimated value")
parameter_distribution = parameter_distribution + timeline_theme +theme(legend.position="none") +
theme( panel.grid.major.y = element_blank(),  axis.title.x =element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank())
# --------------------------- plot raw data ------------------------------------
parameter_distribution <- ggplot(data = db.free_parameters,
aes(x = 1, y = parameter_value,fill = parameter_name,
color = parameter_name) ) +
geom_point(aes(x = 1, y = parameter_value, group = ID), alpha = 0.9, position = position_dodge(0.6)) +
geom_crossbar(data = db.free_parameters.bg , aes(x = 1,y = parameter_value, ymin=parameter_value, ymax=parameter_value),
width = 0.8 , alpha = 0) +
geom_errorbar(data = db.free_parameters.bg , aes(x = 1, ymin = parameter_value-se, ymax = parameter_value+se),
width = 0.7) +
facet_wrap(~parameter_name) +
geom_flat_violin(aes(x = 1.8), alpha = .3, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0, end = 0.5, option = "viridis") +
theme_bw() +
labs(x = '', y = "Estimated value")
# ----------------------------format database ----------------------------------
free_parameters = aggregate(alpha ~ ID + eta, data = MDL,  function(x) mean(x, na.rm =T))
db.free_parameters <- gather(free_parameters,parameter_name, parameter_value, eta:alpha, factor_key=TRUE)
db.free_parameters$parameter_name <- recode(db.free_parameters$parameter_name, "alpha" = "\u03b1",
"eta" = "\u03B7")
# ----------------------------format database ----------------------------------
free_parameters = aggregate(alpha ~ ID + eta, data = MDL,  function(x) mean(x, na.rm =T))
db.free_parameters <- gather(free_parameters,parameter_name, parameter_value, eta:alpha, factor_key=TRUE)
db.free_parameters$parameter_name <- recode(db.free_parameters$parameter_name, "alpha" = "\u03b1",
"eta" = "\u03B7")
db.free_parameters.bg = summarySEwithin(db.free_parameters,
measurevar = c("parameter_value"),
withinvars = c("parameter_name"),
idvar = "ID")
corr.test(free_parameters$eta,free_parameters$alpha)
# --------------------------- plot raw data ------------------------------------
parameter_distribution <- ggplot(data = db.free_parameters,
aes(x = 1, y = parameter_value,fill = parameter_name,
color = parameter_name) ) +
geom_point(aes(x = 1, y = parameter_value, group = ID), alpha = 0.9, position = position_dodge(0.6)) +
geom_crossbar(data = db.free_parameters.bg , aes(x = 1,y = parameter_value, ymin=parameter_value, ymax=parameter_value),
width = 0.8 , alpha = 0) +
geom_errorbar(data = db.free_parameters.bg , aes(x = 1, ymin = parameter_value-se, ymax = parameter_value+se),
width = 0.7) +
facet_wrap(~parameter_name) +
geom_flat_violin(aes(x = 1.8), alpha = .3, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0, end = 0.5, option = "viridis") +
theme_bw() +
labs(x = '', y = "Estimated value")
# --------------------------- plot raw data ------------------------------------
parameter_distribution
db.free_parameters
db.free_parameters$parameter_name <- recode(db.free_parameters$parameter_name, "alpha" = "\u03b1",
"eta" = "\u03B7")
(db.free_parameters$parameter_name
)
db.free_parameters$parameter_name <- ddplyr::recode(db.free_parameters$parameter_name, "alpha" = "\u03b1",
"eta" = "\u03B7")
library(dplyr)
db.free_parameters$parameter_name <- dplyr::recode(db.free_parameters$parameter_name, "alpha" = "\u03b1",
"eta" = "\u03B7")
db.free_parameters$parameter_name
# --------------------------- plot raw data ------------------------------------
parameter_distribution <- ggplot(data = db.free_parameters,
aes(x = 1, y = parameter_value,fill = parameter_name,
color = parameter_name) ) +
geom_point(aes(x = 1, y = parameter_value, group = ID), alpha = 0.9, position = position_dodge(0.6)) +
geom_crossbar(data = db.free_parameters.bg , aes(x = 1,y = parameter_value, ymin=parameter_value, ymax=parameter_value),
width = 0.8 , alpha = 0) +
geom_errorbar(data = db.free_parameters.bg , aes(x = 1, ymin = parameter_value-se, ymax = parameter_value+se),
width = 0.7) +
facet_wrap(~parameter_name) +
geom_flat_violin(aes(x = 1.8), alpha = .3, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0, end = 0.5, option = "viridis") +
theme_bw() +
labs(x = '', y = "Estimated value")
parameter_distribution = parameter_distribution + timeline_theme +theme(legend.position="none") +
theme( panel.grid.major.y = element_blank(),  axis.title.x =element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank())
parameter_distribution
# --------------------------- plot raw data ------------------------------------
parameter_distribution <- ggplot(data = db.free_parameters,
aes(x = 1, y = parameter_value,fill = parameter_name,
color = parameter_name) ) +
geom_point(aes(x = 1, y = parameter_value, group = ID), alpha = 0.9, position = position_dodge(0.6)) +
geom_crossbar(data = db.free_parameters.bg , aes(x = 1,y = parameter_value, ymin=parameter_value, ymax=parameter_value),
width = 0.8 , alpha = 0) +
geom_errorbar(data = db.free_parameters.bg , aes(x = 1, ymin = parameter_value-se, ymax = parameter_value+se),
width = 0.7) +
facet_wrap(~parameter_name) +
geom_flat_violin(aes(x = 1.8), alpha = .3, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0, end = 0.5, option = "viridis") +
theme_bw() +
labs(x = '', y = "Estimated value")
db.free_parameters.bg = summarySEwithin(db.free_parameters,
measurevar = c("parameter_value"),
withinvars = c("parameter_name"),
idvar = "ID")
db.free_parameters.bg
# --------------------------- plot raw data ------------------------------------
parameter_distribution <- ggplot(data = db.free_parameters,
aes(x = 1, y = parameter_value,fill = parameter_name,
color = parameter_name) ) +
geom_point(aes(x = 1, y = parameter_value, group = ID), alpha = 0.9, position = position_dodge(0.6)) +
geom_crossbar(data = db.free_parameters.bg , aes(x = 1,y = parameter_value, ymin=parameter_value, ymax=parameter_value),
width = 0.8 , alpha = 0) +
geom_errorbar(data = db.free_parameters.bg , aes(x = 1, ymin = parameter_value-se, ymax = parameter_value+se),
width = 0.7) +
facet_wrap(~parameter_name) +
geom_flat_violin(aes(x = 1.8), alpha = .3, position = position_nudge(x = -.15, y = 0),
adjust = 1.8, trim = F, color = NA) +
scale_fill_viridis_d(aesthetics = c("color", "fill"),begin = 0, end = 0.5, option = "viridis") +
theme_bw() +
labs(x = '', y = "Estimated value")
parameter_distribution = parameter_distribution + timeline_theme +theme(legend.position="none") +
theme( panel.grid.major.y = element_blank(),  axis.title.x =element_blank(),
axis.ticks.x=element_blank(),
axis.text.x=element_blank())
parameter_distribution
cairo_pdf(file.path(figures_path,'Supplementary_Figure_3.pdf'))
print(parameter_distribution)
dev.off()
if(!require(pacman)) {
install.packages('pacman')
library(pacman)
}
pacman::p_load(car, effects,afex, jtools, ez, emmeans,
lme4, lmerTest,nlme, psych, rstudioapi, optimx,pbkrtest,
tidyverse, plyr, dplyr, tidyr, reshape, reshape2, pastecs,Rmisc,
devtools,
viridis, ggplot2, grid, gridExtra,cowplot,corrplot,DescTools,ggExtra,
BayesFactor, bayestestR, DHARMa, brms)
require(lattice)
# set path
current_dir <- dirname(getActiveDocumentContext()$path)
setwd(current_dir)
home_path <- getwd()
setwd(home_path)
# run set up
source(file.path(home_path,'R','setup.R'), echo=F)# useful functions
# --------------------- MIDBRAIN
t.test(LEARN_RPE$RPE_in_RPE_VTA_ROI); se(LEARN_RPE$RPE_in_RPE_VTA_ROI)
# BF
ttestBF(LEARN_RPE$RPE_in_RPE_VTA_ROI)
# -----------------------VS and Subcallosal
t.test(LEARN_RPE$RPE_in_RPE_VS_ROI); se(LEARN_RPE$RPE_in_RPE_VS_ROI)
# BF
ttestBF(LEARN_RPE$RPE_in_RPE_VS_ROI)
# ----------------------- vmPFC
t.test(LEARN_RPE$RPE_in_RPE_VMPF_ROI); se(LEARN_RPE$RPE_in_RPE_VMPF_ROI)
# BF
ttestBF(LEARN_RPE$RPE_in_RPE_VMPF_ROI)
#----------------------- Create variables for bayse factor computation
CHANGE_RPE_long$value_b = ifelse(CHANGE_RPE_long$value  == "devalued", -1, 1)
CHANGE_RPE_long$value_b = factor(CHANGE_RPE_long$value_b)
CHANGE_RPE_long$roi_b   = as.character(CHANGE_RPE_long$roi)
#-------------------------------------------------------------- VS subcallosal
vs.mdl = lme(betas ~ value,  data= subset(CHANGE_RPE_long, roi == "RPE_VS"), random= ~ value|ID)
summary(vs.mdl)
intervals(vs.mdl, which = "fixed")
# BF
fit_vs_dev<- brm( scale(betas) ~ value_b + (value_b |ID),
prior =  c(prior(normal(0,0.5), class="b", coef=""),prior(cauchy(0,0.5), class="sd")),
data =subset(CHANGE_RPE_long, roi == "RPE_VS"), # on the aggregate data
iter = 40000, warmup=5000,
family = gaussian(), save_pars = save_pars(all = TRUE))
# BF
fit_vs_dev<- brm( scale(betas) ~ value_b + (value_b |ID),
prior =  c(prior(normal(0,0.5), class="b", coef=""),prior(cauchy(0,0.5), class="sd")),
data =subset(CHANGE_RPE_long, roi == "RPE_VS"), # on the aggregate data
iter = 40000, warmup=5000,
family = gaussian(), save_pars = save_pars(all = TRUE))
if(!require(pacman)) {
install.packages('pacman')
library(pacman)
}
pacman::p_load(car, effects,afex, jtools, ez, emmeans,
lme4, lmerTest,nlme, psych, rstudioapi, optimx,pbkrtest,
tidyverse, plyr, dplyr, tidyr, reshape, reshape2, pastecs,Rmisc,
devtools,
viridis, ggplot2, grid, gridExtra,cowplot,corrplot,DescTools,ggExtra,
BayesFactor, bayestestR, DHARMa, brms)
require(lattice)
# set path
current_dir <- dirname(getActiveDocumentContext()$path)
setwd(current_dir)
home_path <- getwd()
setwd(home_path)
# run set up
source(file.path(home_path,'R','setup.R'), echo=F)# useful functions
#----------------------- Create variables for bayse factor computation
CHANGE_RPE_long$value_b = ifelse(CHANGE_RPE_long$value  == "devalued", -1, 1)
CHANGE_RPE_long$value_b = factor(CHANGE_RPE_long$value_b)
CHANGE_RPE_long$roi_b   = as.character(CHANGE_RPE_long$roi)
#-------------------------------------------------------------- VS subcallosal
vs.mdl = lme(betas ~ value,  data= subset(CHANGE_RPE_long, roi == "RPE_VS"), random= ~ value|ID)
summary(vs.mdl)
intervals(vs.mdl, which = "fixed")
# BF
fit_vs_dev<- brm( scale(betas) ~ value_b + (value_b |ID),
prior =  c(prior(normal(0,0.5), class="b", coef=""),prior(cauchy(0,0.5), class="sd")),
data =subset(CHANGE_RPE_long, roi == "RPE_VS"), # on the aggregate data
iter = 40000, warmup=5000,
family = gaussian(), save_pars = save_pars(all = TRUE))
